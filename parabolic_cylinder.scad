module parabolic_cylinder(width, height, depth) {
    // a * (width / 2)^2 = height
    a = 4 * height / (width * width);

    function f(x) = a * x * x;

    // autogenerated with:
    // val lines = (-50 to 50) map {
    //   x: Int => "[width / 100 * " + x + ", f(width / 100 * " + x + ")]"
    // }
    // println (lines.mkString(",\n            "))

    translate([0,0,-depth])
    linear_extrude(depth * 2) {
        polygon([
            [width / 100 * -50, f(width / 100 * -50)],
            [width / 100 * -49, f(width / 100 * -49)],
            [width / 100 * -48, f(width / 100 * -48)],
            [width / 100 * -47, f(width / 100 * -47)],
            [width / 100 * -46, f(width / 100 * -46)],
            [width / 100 * -45, f(width / 100 * -45)],
            [width / 100 * -44, f(width / 100 * -44)],
            [width / 100 * -43, f(width / 100 * -43)],
            [width / 100 * -42, f(width / 100 * -42)],
            [width / 100 * -41, f(width / 100 * -41)],
            [width / 100 * -40, f(width / 100 * -40)],
            [width / 100 * -39, f(width / 100 * -39)],
            [width / 100 * -38, f(width / 100 * -38)],
            [width / 100 * -37, f(width / 100 * -37)],
            [width / 100 * -36, f(width / 100 * -36)],
            [width / 100 * -35, f(width / 100 * -35)],
            [width / 100 * -34, f(width / 100 * -34)],
            [width / 100 * -33, f(width / 100 * -33)],
            [width / 100 * -32, f(width / 100 * -32)],
            [width / 100 * -31, f(width / 100 * -31)],
            [width / 100 * -30, f(width / 100 * -30)],
            [width / 100 * -29, f(width / 100 * -29)],
            [width / 100 * -28, f(width / 100 * -28)],
            [width / 100 * -27, f(width / 100 * -27)],
            [width / 100 * -26, f(width / 100 * -26)],
            [width / 100 * -25, f(width / 100 * -25)],
            [width / 100 * -24, f(width / 100 * -24)],
            [width / 100 * -23, f(width / 100 * -23)],
            [width / 100 * -22, f(width / 100 * -22)],
            [width / 100 * -21, f(width / 100 * -21)],
            [width / 100 * -20, f(width / 100 * -20)],
            [width / 100 * -19, f(width / 100 * -19)],
            [width / 100 * -18, f(width / 100 * -18)],
            [width / 100 * -17, f(width / 100 * -17)],
            [width / 100 * -16, f(width / 100 * -16)],
            [width / 100 * -15, f(width / 100 * -15)],
            [width / 100 * -14, f(width / 100 * -14)],
            [width / 100 * -13, f(width / 100 * -13)],
            [width / 100 * -12, f(width / 100 * -12)],
            [width / 100 * -11, f(width / 100 * -11)],
            [width / 100 * -10, f(width / 100 * -10)],
            [width / 100 * -9, f(width / 100 * -9)],
            [width / 100 * -8, f(width / 100 * -8)],
            [width / 100 * -7, f(width / 100 * -7)],
            [width / 100 * -6, f(width / 100 * -6)],
            [width / 100 * -5, f(width / 100 * -5)],
            [width / 100 * -4, f(width / 100 * -4)],
            [width / 100 * -3, f(width / 100 * -3)],
            [width / 100 * -2, f(width / 100 * -2)],
            [width / 100 * -1, f(width / 100 * -1)],
            [width / 100 * 0, f(width / 100 * 0)],
            [width / 100 * 1, f(width / 100 * 1)],
            [width / 100 * 2, f(width / 100 * 2)],
            [width / 100 * 3, f(width / 100 * 3)],
            [width / 100 * 4, f(width / 100 * 4)],
            [width / 100 * 5, f(width / 100 * 5)],
            [width / 100 * 6, f(width / 100 * 6)],
            [width / 100 * 7, f(width / 100 * 7)],
            [width / 100 * 8, f(width / 100 * 8)],
            [width / 100 * 9, f(width / 100 * 9)],
            [width / 100 * 10, f(width / 100 * 10)],
            [width / 100 * 11, f(width / 100 * 11)],
            [width / 100 * 12, f(width / 100 * 12)],
            [width / 100 * 13, f(width / 100 * 13)],
            [width / 100 * 14, f(width / 100 * 14)],
            [width / 100 * 15, f(width / 100 * 15)],
            [width / 100 * 16, f(width / 100 * 16)],
            [width / 100 * 17, f(width / 100 * 17)],
            [width / 100 * 18, f(width / 100 * 18)],
            [width / 100 * 19, f(width / 100 * 19)],
            [width / 100 * 20, f(width / 100 * 20)],
            [width / 100 * 21, f(width / 100 * 21)],
            [width / 100 * 22, f(width / 100 * 22)],
            [width / 100 * 23, f(width / 100 * 23)],
            [width / 100 * 24, f(width / 100 * 24)],
            [width / 100 * 25, f(width / 100 * 25)],
            [width / 100 * 26, f(width / 100 * 26)],
            [width / 100 * 27, f(width / 100 * 27)],
            [width / 100 * 28, f(width / 100 * 28)],
            [width / 100 * 29, f(width / 100 * 29)],
            [width / 100 * 30, f(width / 100 * 30)],
            [width / 100 * 31, f(width / 100 * 31)],
            [width / 100 * 32, f(width / 100 * 32)],
            [width / 100 * 33, f(width / 100 * 33)],
            [width / 100 * 34, f(width / 100 * 34)],
            [width / 100 * 35, f(width / 100 * 35)],
            [width / 100 * 36, f(width / 100 * 36)],
            [width / 100 * 37, f(width / 100 * 37)],
            [width / 100 * 38, f(width / 100 * 38)],
            [width / 100 * 39, f(width / 100 * 39)],
            [width / 100 * 40, f(width / 100 * 40)],
            [width / 100 * 41, f(width / 100 * 41)],
            [width / 100 * 42, f(width / 100 * 42)],
            [width / 100 * 43, f(width / 100 * 43)],
            [width / 100 * 44, f(width / 100 * 44)],
            [width / 100 * 45, f(width / 100 * 45)],
            [width / 100 * 46, f(width / 100 * 46)],
            [width / 100 * 47, f(width / 100 * 47)],
            [width / 100 * 48, f(width / 100 * 48)],
            [width / 100 * 49, f(width / 100 * 49)],
            [width / 100 * 50, f(width / 100 * 50)]
        ]);
    }
}
